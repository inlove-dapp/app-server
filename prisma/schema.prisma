datasource db {
  // could be postgresql or mysql
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  // supabase related
  supabaseUserId String? @unique

  Posts Post[]

  // Authorized posts
  AuthorizedPosts   Post[]   @relation("AuthorizedUsers", references: [id], fields: [AuthorizedPostIds])
  AuthorizedPostIds String[] @map("authorizedPostIds") @db.ObjectId

  // Itinerary reports
  CreatedItineraryReport ItineraryReport[] @relation("CreatedItineraryReport")

  AuthorizedItineraryReports   ItineraryReport[] @relation("AuthorizedUsers", references: [id], fields: [AuthorizedItineraryReportIds])
  AuthorizedItineraryReportIds String[]          @map("authorizedItineraryReportIds") @db.ObjectId
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  published Boolean
  isPublic  Boolean

  // Linked posts
  LinkToPosts   Post[]  @relation("LinkToPosts")
  LinkFromPosts Post[]  @relation("LinkFromPosts")
  FromPost      Post?   @relation("LinkFromPosts", fields: [FromPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ToPost        Post?   @relation("LinkToPosts", fields: [ToPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  FromPostId    String? @map("fromPostId") @db.ObjectId
  ToPostId      String? @map("toPostId") @db.ObjectId

  // User
  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // Authorized users
  // if isPublic is true, this field is ignored
  // if isPublic is false, only authorized users can see this post
  AuthorizedUsers   User[]   @relation("AuthorizedUsers", references: [id], fields: [AuthorizedUserIds])
  AuthorizedUserIds String[] @map("authorizedUserIds") @db.ObjectId

  // Data reprsents the data of the post
  // It might be a blog post, a trip map, a video or a gallery
  data Json
}

model Upload {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Name of the file
  name      String
  // Url of the file
  url       String
  // Type of the file
  type      UploadType
  // Size of the file in bytes
  size      Int
  // Metadata of the file
  metadata  Json
  // Signature of the file signed by the user
  signature String

  ItineraryReport    ItineraryReport[] @relation(fields: [itineraryReportIds], references: [id])
  itineraryReportIds String[]          @map("itineraryReportId") @db.ObjectId
}

model ItineraryReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  User   User   @relation("CreatedItineraryReport", fields: [userId], references: [id])
  userId String @db.ObjectId

  AuthorizedUsers   User[]   @relation("AuthorizedUsers", references: [id], fields: [AuthorizedUserIds])
  AuthorizedUserIds String[] @map("authorizedUserIds") @db.ObjectId

  // attachments
  Attachments   Upload[] @relation(fields: [attachmentIds], references: [id])
  attachmentIds String[] @map("uploadIds") @db.ObjectId

  title       String
  description String
  type        ItineraryReportType
  location    Json
}

enum PostType {
  BLOG
  TRIP_MAP
  VIDEO
  GALLERY
}

enum UploadType {
  IMAGE
  VIDEO
  AUDIO
}

enum ItineraryReportType {
  TRIP
  EVENT
  MEETING
  LOCATION
  JOB
  EMERGENCY
  TASK
  PARTY
  OTHER
}
